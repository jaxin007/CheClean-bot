const Composer = require('telegraf/composer');
const { apiService } = require('./dependencies');
const { getSafe } = require('./get-safe');

const createCaseText = '–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ –æ–ø–∏—Å, —Ñ–æ—Ç–æ —Ç–∞ –ª–æ–∫–∞—Ü—ñ—é –º—ñ—Å—Ü—è –ø–æ–¥—ñ—ó. –†–æ–±–∏ –≤—Å–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ, —Ç–æ–±—Ç–æ —Å–ø–æ—á–∞—Ç–∫—É –æ–ø–∏—Å, –ø–æ—Ç—ñ–º —Ñ–æ—Ç–æ, –∞ –≤ –∫—ñ–Ω—Ü—ñ –ª–æ–∫–∞—Ü—ñ—è.\n\n*–ß–µ–∫–∞—é –≤—ñ–¥ —Ç–µ–±–µ –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ —Ç–∏ –±–∞—á–∏—à.*';

const botUseHandler = (ctx) => {
  if (getSafe(() => ctx.update.message.text === '/create' && ctx.update.callback_query.data === 'create')) {
    ctx.replyWithMarkdown(createCaseText);
    return ctx.wizard.selectStep(2);
  }
  ctx.replyWithMarkdown(
    '–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ CheClean. –Ø —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞—à–æ–º—É –º—ñ—Å—Ç—É üòä \n–î–ª—è *–ø–æ—á–∞—Ç–∫—É* —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /create.',
    {
      reply_markup: {
        one_time_keyboard: true,
        inline_keyboard: [
          [
            { text: '–î–æ–ø–æ–º–æ–≥–∞', callback_data: 'help' },
            { text: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data: 'cancel' },
          ],
          [{ text: '–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É', callback_data: 'create' }],
        ],
      },
    },
  );
  return ctx.wizard.next();
};

function createCase(ctx) {
  ctx.replyWithMarkdown(createCaseText);
  return ctx.wizard.next();
}

const createCaseHandler = new Composer();
createCaseHandler.command('create', createCase);
createCaseHandler.action('create', createCase);

const textHandler = new Composer();
textHandler.on('text', (ctx) => {
  ctx.wizard.state.data = {};
  const details = ctx.update.message.text;
  ctx.wizard.state.data.details = details;
  ctx.reply('–ö—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –º—ñ—Å—Ü—è.');
  return ctx.wizard.next();
});
textHandler.use((ctx) => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ —Ç–∏ –±–∞—á–∏—à.'));

const photoHandler = new Composer();
photoHandler.on('photo', async (ctx) => {
  const photosList = ctx.update.message.photo;
  const lastPhoto = photosList.length - 1;
  const biggestPhoto = photosList[lastPhoto];

  const url = await ctx.telegram.getFileLink(biggestPhoto);

  ctx.wizard.state.data.image_url = url;

  ctx.reply('–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞–π –º–µ–Ω—ñ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é.', {
    reply_markup: {
      one_time_keyboard: true,
      keyboard: [[{ text: '–ü–µ—Ä–µ–¥–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', request_location: true }]],
    },
  });
  return ctx.wizard.next();
});
photoHandler.use((ctx) => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ —Å–ø–æ—á–∞—Ç–∫—É —Ñ–æ—Ç–æ.'));

const locationHandler = new Composer();
locationHandler.on('location', async (ctx) => {
  const { location } = ctx.update.message;
  const createdCase = ctx.wizard.state.data;
  ctx.wizard.state.data.location = location;

  await ctx.replyWithPhoto(
    { url: createdCase.image_url },
    {
      caption: `${createdCase.details} \n\n\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Å–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É`,
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'approved' },
            { text: '–í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: 'declined' },
          ],
        ],
      },
    },
  );
  return ctx.wizard.next();
});
locationHandler.use((ctx) => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é.'));

const validateHandler = new Composer();
validateHandler.action('approved', (ctx) => {
  const createdCase = ctx.wizard.state.data;
  ctx.telegram.sendChatAction(ctx.update.callback_query.message.chat.id, 'upload_document');
  apiService
    .sendCase(createdCase)
    .then(() => ctx.reply('–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É! –í–∞—à –∑–∞–ø–∏—Ç –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É.'))
    .catch(() => ctx.reply('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :)'));
  ctx.editMessageReplyMarkup({});
  return ctx.scene.leave();
});
validateHandler.action('declined', (ctx) => {
  ctx.editMessageReplyMarkup({});
  ctx.reply('–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ :)');
  return ctx.scene.leave();
});

module.exports = {
  botUseHandler,
  createCaseHandler,
  textHandler,
  photoHandler,
  locationHandler,
  validateHandler,
};
